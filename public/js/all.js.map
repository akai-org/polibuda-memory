{"version":3,"sources":["app.js","classes/Card.js","classes/Set.js","classes/SetLoader.js","classes/SetSelectScreen.js","classes/State.js"],"names":["app","document","addEventListener","started","state","State","set","sets","setloader","SetLoader","activeSets","forEach","key","push","setselectscreen","SetSelectScreen","Card","person","type","name","position","titleBefore","titleAfter","image","pageLink","ret","Set","file","loadFromFile","self","fetch","then","response","contentType","headers","get","indexOf","json","setType","memorySet","loadFaculty","loadPlace","console","log","shortName","cards","people","card","loadFromPerson","html","setsToLoad","loadSetsFromFileArray","fileArray","returnSetArray","setsDisplayed","displaySets","updateSetsState","setsContainer","getElementById","activeSet","call","querySelectorAll","div","slice","getElementsByClassName","checkbox","checked","innerHTML","getDisplay","states","window","location","hash","target","replace","i","classList","add","remove","load","cardsDisplayed","cardsContainer"],"mappings":"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","file":"all.js","sourcesContent":["let app = app || {};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    if(app.started) return;\r\n    app.started = true;\r\n\r\n    app.state = new app.State();\r\n    //TODO: check state from hash?\r\n    app.state.set('welcome');\r\n\r\n    //All loaded sets (array of Set objects)\r\n    app.sets = [];\r\n    //Load sets\r\n    app.setloader = new app.SetLoader();\r\n    //Currently active sets (array of integer keys of app.sets)\r\n    app.activeSets = [];\r\n    //Activate all sets by default\r\n    app.sets.forEach(function(set, key) {\r\n        app.activeSets.push(set);\r\n    });\r\n\r\n    //New set select screen class\r\n    app.setselectscreen = new app.SetSelectScreen();\r\n\r\n\r\n});","var app = app || {};\r\n\r\napp.Card = class {\r\n    constructor() {\r\n    }\r\n\r\n    loadFromPerson(person) {\r\n        this.type = 'person';\r\n        this.name = person.name;\r\n        this.position = person.position;\r\n        this.titleBefore = person.titleBefore || '';\r\n        this.titleAfter = person.titleAfter || '';\r\n        //Add a sample image for people without images\r\n        //http://www.clipartkid.com/images/649/blank-face-outline-cliparts-co-W4GNfR-clipart.jpg\r\n        this.image =  person.image  || 'images/faculty/blank-face.jpg';\r\n        this.pageLink = person.pageLink;\r\n    }\r\n\r\n    getDisplay() {\r\n        let ret = '';\r\n        ret += '<div class=\"card\" id=\"\">';\r\n        ret += '<img src=\"' + this.image + '\">';\r\n        ret += '<div class=\"displayName\">';\r\n        ret += '<span class=\"titleBefore\">' + this.titleBefore + '</span>';\r\n        ret += '<span class=\"name\">' + this.name + '</span>';\r\n        ret += '<span class=\"titleAfter\">' + this.titleAfter + '</span>';\r\n        ret += '</div>';\r\n        ret += '<span class=\"position\">' + this.position + '</span>';\r\n        ret += '</div>';\r\n\r\n        return ret;\r\n    }\r\n}","var app = app || {};\r\n\r\napp.Set = class {\r\n\r\n\r\n    //class fields\r\n    //name = '';\r\n    //image = '';\r\n    //shortName = '';\r\n    //cards = [];\r\n\r\n    constructor(file) {\r\n        //Load set from specified file\r\n        this.loadFromFile(file);\r\n    }\r\n\r\n    loadFromFile(file) {\r\n        let self = this;\r\n        fetch(file)\r\n            .then(function(response) {\r\n                var contentType = response.headers.get(\"content-type\");\r\n                if(contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n                    return response.json().then(function(json) {\r\n                        let setType = json.memorySet.type;\r\n                        if (setType == 'faculty') {\r\n                            //Loading a faculty\r\n                            self.loadFaculty(json);\r\n                        } else if (setType == 'place') {\r\n                            //Loading a place\r\n                            self.loadPlace(json);\r\n                        } else {\r\n                            console.log('Unknown set type');\r\n                            console.log(json);\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log('Oops, we haven\\'t got JSON! File: ' + file);\r\n                }\r\n            });\r\n    }\r\n\r\n    loadFaculty(json) {\r\n        let self = this;\r\n        let set = json.memorySet;\r\n        //Set data from JSON file\r\n        this.name = set.name;\r\n        this.image = set.image;\r\n        this.shortName = set.shortName;\r\n        this.cards = [];\r\n        //Create cards from people\r\n        set.people.forEach( function (person) {\r\n            let card = new app.Card();\r\n            card.loadFromPerson(person);\r\n            self.cards.push(card);\r\n        });\r\n    }\r\n\r\n    getDisplay() {\r\n        let self = this;\r\n        let html = '';\r\n        html += '<div class=\"set\" data-name=\"' + self.name + '\"'+ 'data-shortName=\"' + self.shortName + '\"' +'>' +\r\n            '<p>Set:' + self.name + '</p>' +\r\n            '<input class=\"setCheckbox\" type=\"checkbox\">'+\r\n            '</div>';\r\n        return html;\r\n    }\r\n\r\n    loadPlace(json) {\r\n        //TODO: fill this in\r\n        console.log('Loaded place');\r\n    }\r\n}","var app = app || {};\r\n\r\napp.SetLoader = class {\r\n\r\n    constructor(){\r\n        //TODO: This could maybe be moved to an external file,\r\n        //but the set list is generally static, so an array will do.\r\n        let setsToLoad = [\r\n            'json/faculty-wa.json',\r\n            'json/faculty-wbiis.json',\r\n            'json/faculty-wbmiz.json',\r\n            'json/faculty-we.json',\r\n            'json/faculty-weit.json',\r\n            'json/faculty-wft.json',\r\n            'json/faculty-wi.json',\r\n            'json/faculty-wiz.json',\r\n            'json/faculty-wmrit.json',\r\n            'json/faculty-wtch.json'\r\n        ];\r\n\r\n        this.loadSetsFromFileArray(setsToLoad);\r\n    }\r\n\r\n    loadSetsFromFileArray(fileArray) {\r\n        let returnSetArray = [];\r\n        fileArray.forEach(function (file) {\r\n            console.log(file);\r\n            app.sets.push(new app.Set(file));\r\n        });\r\n    }\r\n}","var app = app || {};\r\n\r\napp.SetSelectScreen = class {\r\n\r\n    load() {\r\n        let self = this;\r\n        console.log('Loaded set-select screen');\r\n        //Fill in available sets\r\n        app.setsDisplayed = false;\r\n        self.displaySets();\r\n        //Fill in checked state\r\n        self.updateSetsState();\r\n    }\r\n\r\n    updateSetsState() {\r\n        //Update checked/unchecked state\r\n        let setsContainer = document.getElementById('sets');\r\n        //check or uncheck depending if its loaded\r\n        app.activeSets.forEach(function (activeSet) {\r\n            console.log(activeSet.name);\r\n            [].forEach.call(setsContainer.querySelectorAll('[data-shortname=\"' + activeSet.shortName + '\"]'), function (div) {\r\n                [].slice.call(div.getElementsByClassName('setCheckbox')).forEach(function (checkbox) {\r\n                   checkbox.checked=true;\r\n                });\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    displaySets() {\r\n        //Display available sets to screen\r\n        if (!app.setsDisplayed) {\r\n            let setsContainer = document.getElementById('sets');\r\n            app.sets.forEach(function (set) {\r\n                setsContainer.innerHTML += set.getDisplay();\r\n            });\r\n            app.setsDisplayed = true;\r\n        }\r\n    }\r\n\r\n    addSet(set) {\r\n        //Add set to playable\r\n    }\r\n\r\n    removeSet(set) {\r\n        //remove set from playable\r\n    }\r\n\r\n}","var app = app || {};\r\n\r\n//Screens in the app\r\napp.states = ['welcome', 'set-select', 'game', 'score'];\r\n\r\napp.State = class {\r\n    constructor() {\r\n        let self = this;\r\n        window.addEventListener('hashchange', function(){\r\n            //TODO: Add protection for wrong hashes?\r\n            self.set(window.location.hash);\r\n        });\r\n    }\r\n\r\n    set(target) {\r\n        target = target.replace('#', '');\r\n\r\n        for(let i in app.states) {\r\n            let state = app.states[i];\r\n            document.getElementById(state).classList.add('hidden');\r\n        }\r\n        document.getElementById(target).classList.remove('hidden');\r\n\r\n        switch (target) {\r\n            case 'welcome':\r\n                console.log('Loaded welcome screen');\r\n                break;\r\n            case 'set-select':\r\n                app.setselectscreen.load();\r\n                break;\r\n            case 'game':\r\n                console.log('Loaded game screen');\r\n                //Display cards\r\n                if (!app.cardsDisplayed) {\r\n                    let cardsContainer = document.getElementById('cards');\r\n                    for(let set in app.activeSets) {\r\n                        console.log('set: '+set);\r\n                        app.sets[set].cards.forEach(function (card) {\r\n                            cardsContainer.innerHTML += card.getDisplay();\r\n                        })\r\n                    }\r\n                    app.cardsDisplayed = true;\r\n                }\r\n                break;\r\n            case 'score':\r\n                console.log('Loaded score screen');\r\n                break;\r\n        }\r\n    }\r\n};"]}